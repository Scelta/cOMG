#!/usr/bin/env perl
use warnings;
use strict;
use File::Basename;
use List::Util qw/min/;

sub usage {
  print <<USAGE;
usage:
  perl OAs1 fq1 <prefix> <Qual system(33|64)> <min length> <seed OA> <fragment OA> <*stLFR> <*barcode list> <*debug>
  perl OAs1 fq1,fq2 <prefix> <Qual system(33|64)> <min length> <seed OA> <fragment OA> <*stLFR> <*barcode list> <*debug>
e.g	perl OAs1 sample.1.fq,sample.2.fq clean 33 30 20 10 # PhedQ(by whole read)
    -i      input file. Use comma to specifiy paired input files
    -pfx    output prefix
    -Qsys   [33|64] Quality system
    -minLen [0:]    Minimal allowed read length
    -Scut   [0:50]  Threshold for seed quality
    -Qcut   [0:50]  Threshold for fragment quality
    -stLFR  [0|1|2] off|on|only. whether turn on stLFR detection mode. If true, a barcode list file should be provided.
    -pos3   [int]   Optionally defined the last position of barcode(sometime it's 132). Default is 144(start from 0);
    -bfile  barcode list
    -debug  [0|1]   debug off or on
USAGE
	exit;
}


## load arguments
our ($fq,$pfx,$Qsys,$minLen,$Scut,$Qcut,$stlfr,$pos3,$bfile,$debug,$help);

die &usage if !defined $ARGV[0];

if($ARGV[0] =~ /^-/){
	use Getopt::Long;
	GetOptions(
	"i:s"=> \$fq,
	"pfx:s"=> \$pfx,
	"Qsys:s"=> \$Qsys,
	"minLen:s" => \$minLen,
	"Scut:s" => \$Scut,
	"Qcut:i" => \$Qcut,
	"stlfr:s"=> \$stlfr,
	"pos3:s" => \$pos3,
	"bfile:s"=> \$bfile,
	"debug:s"=> \$debug,
	"help:s" => \$help,
	);
}else{
	#Keep old argument behavior for a while
	($fq,$pfx,$Qsys,$minLen,$Scut,$Qcut,$stlfr,$pos3,$bfile,$debug) = @ARGV;
}
if($help || !defined($fq || $fq || $pfx) ){
	die &usage;
}

### Init ###
my $start_run = time();
sub openMethod {$_ = shift; return(($_ =~ /\.gz$/)?"pigz -dc $_|":"$_")}
### Create accuracy table ###
my (%P2A, %BEAD_BARCODE);
$P2A{0}= -10;
for (my $p=1;$p<=50;$p++){
	$P2A{$p} = log(1-10**(-$p/10))/log(10);
}

$minLen ||= 30;
$Scut ||= 30;
$Qcut ||= 20;
$Qsys ||= 33;
my @fqs = split /,/,$fq;
my $mode= (@fqs==2)?"PE":"SE";
$stlfr ||= 0;
$pos3  ||= 144;
### Trasnform cutoff ###
$Scut  = sprintf("%.0f",($Scut <= 1)?(-10*log(1-$Scut)/log(10)):$Scut);
$Qcut  = sprintf("%.0f",($Qcut <= 1)?(-10*log(1-$Qcut)/log(10)):$Qcut);

if($stlfr >0){
		&stlfr_barcode_dict($bfile);
		if($mode eq "PE"){
			open M1,"|pigz >$pfx.stLFRmiss.1.fq.gz" or die "Output stLFRmiss 1 error:$!\n";
			open M2,"|pigz >$pfx.stLFRmiss.2.fq.gz" or die "Output stLFRmiss 2 error:$!\n";
		}else{
			open M1,"|pigz >$pfx.stLFRmiss.fq.gz" or die "Output stLFRmiss error:$!\n";
		}
}
our %SLOG;

### Main ###
if($mode eq "PE"){
	open F1, &openMethod($fqs[0]) or die "Input 1 error:$!\n";
	open O1,"|pigz >$pfx.clean.1.fq.gz" or die "Output 1 error:$!\n";
	open F2,&openMethod($fqs[1]) or die "Input 2 error:$!\n";
	open O2,"|pigz >$pfx.clean.2.fq.gz" or die "Output 2 error:$!\n";
	open O3,"|pigz >$pfx.clean.single.fq.gz" or die "Output 3 error:$!\n";
}else{
	open F1,&openMethod($fqs[0]) or die "Input 1 error:$!\n";
	open O1,"|pigz >$pfx.clean.fq.gz" or die "Output 1 error:$!\n";
}
open STAT,"> $pfx.clean.stat_out",or die "Open log file error:$!\n";

my %STAT;
my (@total, @remainQ, @sum_bp, @sum_oa, @sum_Q, @sum_s) = ();
my (@sum_lens, @sum_QB10, @sum_QB20, @sum_QB30, @sum_QA10, @sum_QA20, @sum_QA30) = ();
my @min_bp = (1e9,1e9,1e9);
my @max_bp = (0, 0, 0);

#
my (@fqID,@seq,@num,@qual,@originLength,@Tlength,@Aqual,@PQ,@start,@len,@count,@avgQ) =();
my (@QS0,@QS1) = ();
while(<F1>){
	#F1 info
	(@fqID,@seq,@num,@qual,@originLength,@Tlength,@Aqual,@PQ,@start,@len,@count,@avgQ) =();
	#traditional quality
	(@QS0,@QS1) = ();
	chomp;
	($fqID[0],$seq[0],$num[0],$qual[0])= &fqRead($_,\*F1);
	$total[0] ++;
	if($mode eq "SE"){
		my @a = split /\t| /,$fqID[0];
		($fqID[0] = $a[0]) =~ s/\/[12]$//;
	}else{
		$total[1] ++;
		my $l2 = <F2>;
		($fqID[1],$seq[1],$num[1],$qual[1])= &fqRead($l2,\*F2);
	}
	my ($tag,$min) = (); #init for stFLR;

	# seek barcodes, trim & filter
	if($mode eq "PE"){
		if($stlfr==0){
			($Aqual[0],$PQ[0],$start[0],$len[0],$seq[0],$qual[0],@QS0) = &ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,$seq[0],$qual[0]);
			($Aqual[1],$PQ[1],$start[1],$len[1],$seq[1],$qual[1],@QS1) = &ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,$seq[1],$qual[1]);
		}elsif($stlfr==1){
			$min = &stlfr_get_barcode_label($seq[1]);
			($Aqual[0],$PQ[0],$start[0],$len[0],$seq[0],$qual[0],@QS0) = &ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,$seq[0],$qual[0]);
			($Aqual[1],$PQ[1],$start[1],$len[1],$seq[1],$qual[1],@QS1) = &ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,substr($seq[1],0,100),substr($qual[1],0,100));
			if($min == 0){
				print M1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				print M2 "$fqID[1]\n$seq[1]\n$num[1]\n$qual[1]\n";
				next;
			}
		}elsif($stlfr==2){
			$min = &stlfr_get_barcode_label($seq[1]);
			($Aqual[0],$PQ[0],$start[0],$len[0],@QS0) = (1,40,0,length($seq[0]));
			($Aqual[1],$PQ[1],$start[1],$len[1],@QS1) = (1,40,0,length($seq[1]));
			if($min == 0){
				print M1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				print M2 "$fqID[1]\n$seq[1]\n$num[1]\n$qual[1]\n";
			}else{
				print O1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				print O2 "$fqID[1]\n$seq[1]\n$num[1]\n$qual[1]\n";
				&cumulate(0,0);
				&cumulate(1,1);
			}
			next; # Skip filter
		}
		&preCumulate(0,0);
		&preCumulate(1,1);
		 # filter
		if( $len[0] >= $minLen && $PQ[0] >= $Qcut) {
			if( $len[1] >= $minLen && $PQ[1] >= $Qcut) {
				print O1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				print O2 "$fqID[1]\n$seq[1]\n$num[1]\n$qual[1]\n";
				&cumulate(0,0);
				&cumulate(1,1);
			}else{
				print O3 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				&cumulate(2,0);
			}
		}else{
			if( $len[1] >= $minLen && $PQ[1] >= $Qcut) {
				print O3 "$fqID[1]\n$seq[1]\n$num[1]\n$qual[1]\n";
				&cumulate(2,1);
			}
		}
	}else{
		if($stlfr==0){
			($Aqual[0],$PQ[0],$start[0],$len[0],$seq[0],$qual[0],@QS0) =
			&ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,$seq[0],$qual[0]);
		}elsif($stlfr==1){
			$min = &stlfr_get_barcode_label($seq[0]);
			($Aqual[0],$PQ[0],$start[0],$len[0],$seq[0],$qual[0],@QS0) =
			&ca1_cut($P2A{$Scut},$P2A{$Qcut},$Qsys,substr($seq[0],0,100),substr($qual[0],0,100)); #Caution: the 100 may be changed in the furture;
			if($min == 0){
				print M1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				next;
			}
		}elsif($stlfr==2){
			$min = &stlfr_get_barcode_label($seq[0]);
			if($min == 0){
				print M1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
			}else{
				print O1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
				&cumulate(0,0);
			}
			next; # Skip filter
		}
		&preCumulate(0,0);
    # filter
    if( $len[0] >= $minLen && $PQ[0] >= $Qcut) {
      print O1 "$fqID[0]\n$seq[0]\n$num[0]\n$qual[0]\n";
      # stat
			&cumulate(0,0);
    }
	}
}
close F1;
close O1;
if($mode eq "PE"){
	close F2;
	close O2;
	close O3;
}

if($stlfr >0){
	close M1;
	if($mode eq "PE"){
		close M2;
	}
}

#stat;
if($mode eq "PE" && $total[0] ne $total[1]){ print STDERR "Caution: reads number from Pair1 differed from that from pair2\n"}
my $total = (defined $total[1])?$total[0] + $total[1]:$total[0];
my ($max_bp, $min_bp, $sum_bp, $sum_oa, $sum_Q, $sum_s, $remainQ) = (0, 1e9, 0, 0, 0, 0, 0);
my ($slens,$sQB10,$sQB20,$sQB30,$sQA10,$sQA20,$sQA30) = (0,0,0,0,0,0,0);
($sum_lens[2],$sum_QB10[2],$sum_QB20[2],$sum_QB30[2])= (0,0,0,0);
for(my $i=0;$i<@remainQ;$i++){
	$max_bp  = ($max_bp > $max_bp[$i])?$max_bp:$max_bp[$i];
	$min_bp  = ($min_bp < $min_bp[$i])?$min_bp:$min_bp[$i];
	$sum_bp += $sum_bp[$i];
	$sum_oa += $sum_oa[$i];
	$sum_Q  += $sum_Q[$i];
	$sum_s  += $sum_s[$i];
	$remainQ+= $remainQ[$i];
	#
	$slens += $sum_lens[$i];
	$sQB10 += $sum_QB10[$i]; $sQA10 += $sum_QA10[$i];
	$sQB20 += $sum_QB20[$i]; $sQA20 += $sum_QA20[$i];
	$sQB30 += $sum_QB30[$i]; $sQA30 += $sum_QA30[$i];
}
my $avgL = sprintf("%.0f",($remainQ==0)?0:$sum_bp  /$remainQ);
my $avgOA= sprintf("%.4f",($remainQ==0)?0:$sum_oa  /$remainQ);
my $avgQ = sprintf("%.0f",($sum_bp ==0)?0:$sum_Q   /$remainQ);
my $avgS = sprintf("%.0f",($remainQ==0)?0:$sum_s   /$remainQ);
my $rate = sprintf("%.4f",($total  ==0)?0:$remainQ /  $total);
my $tag = basename($pfx);
my $rQB10 = sprintf("%.4f",($slens==0)?0:$sQB10  /$slens);
my $rQB20 = sprintf("%.4f",($slens==0)?0:$sQB20  /$slens);
my $rQB30 = sprintf("%.4f",($slens==0)?0:$sQB30  /$slens);
my $rQA10 = sprintf("%.4f",($slens==0)?0:$sQA10  /$sum_bp);
my $rQA20 = sprintf("%.4f",($slens==0)?0:$sQA20  /$sum_bp);
my $rQA30 = sprintf("%.4f",($slens==0)?0:$sQA30  /$sum_bp);
#my $debugHead = ($debug)?"\tN>$n|Len<$lf|PQ<$Qf|N+Len|N+PQ|Len+PQ|HOMER":"";

print STAT "Total\tQ10\tQ20\tQ30\tmax\tmin\tavgLen\tavgStart\tavgOA\tavgOAQ\tQ10\tQ20\tQ30\tremain\trate\n";
print STAT "$total\t$rQB10\t$rQB20\t$rQB30\t$max_bp\t$min_bp\t$avgL\t$avgS\t$avgOA\t$avgQ\t$rQA10\t$rQA20\t$rQA30\t$remainQ\t$rate\n";
if($mode eq "PE"){
	print STAT "Read_1\tQ10\tQ20\tQ30\tmax\tmin\tavgLen\tavgStart\tavgOA\tavgOAQ\tQ10\tQ20\tQ30\tremain\trate\n";
	printf STAT ("%d\t%.4f\t%.4f\t%.4f\t%d\t%d\t%d\t%d\t%.4f\t%.0f\t%.4f\t%.4f\t%.4f\t%d\t%.4f\n",
		(defined $remainQ[0])?($total[0],$sum_QB10[0]/$sum_lens[0],$sum_QB20[0]/$sum_lens[0],$sum_QB30[0]/$sum_lens[0],
		$max_bp[0],$min_bp[0],$sum_bp[0]/$remainQ[0],$sum_s[0]/$remainQ[0],$sum_oa[0]/$remainQ[0],$sum_Q[0]/$remainQ[0],
		$sum_QA10[0]/$sum_bp[0],$sum_QA20[0]/$sum_bp[0],$sum_QA30[0]/$sum_bp[0],$remainQ[0],$remainQ[0]/$total[0]):(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
	print STAT "Read_2\tQ10\tQ20\tQ30\tmax\tmin\tavgLen\tavgStart\tavgOA\tavgOAQ\tQ10\tQ20\tQ30\tremain\trate\n";
	printf STAT ("%d\t%.4f\t%.4f\t%.4f\t%d\t%d\t%d\t%d\t%.4f\t%.0f\t%.4f\t%.4f\t%.4f\t%d\t%.4f\n",
		(defined $remainQ[1])?($total[1],$sum_QB10[1]/$sum_lens[1],$sum_QB20[1]/$sum_lens[1],$sum_QB30[1]/$sum_lens[1],
		$max_bp[1],$min_bp[1],$sum_bp[1]/$remainQ[1],$sum_s[1]/$remainQ[1],$sum_oa[1]/$remainQ[1],$sum_Q[1]/$remainQ[1],
		$sum_QA10[1]/$sum_bp[1],$sum_QA20[1]/$sum_bp[1],$sum_QA30[1]/$sum_bp[1],,$remainQ[1],$remainQ[1]/$total[1]):(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
	print STAT "Single\tQ10\tQ20\tQ30\tmax\tmin\tavgLen\tavgStart\tavgOA\tavgOAQ\tQ10\tQ20\tQ30\tremain\trate\n";
	printf STAT ("0\tNA\tNA\tNA\t%d\t%d\t%d\t%d\t%.4f\t%.0f\t%.4f\t%.4f\t%.4f\t%d\t%.4f\n",
		(defined $remainQ[2])?($max_bp[2],$min_bp[2],$sum_bp[2]/$remainQ[2],$sum_s[2]/$remainQ[2],$sum_oa[2]/$remainQ[2],$sum_Q[2]/$remainQ[2],
		$sum_QA10[2]/$sum_bp[2],$sum_QA20[2]/$sum_bp[2],$sum_QA30[2]/$sum_bp[2],$remainQ[2],$remainQ[2]/$total):(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
}
print STAT "length\tcount\n";
foreach my $l(sort {$a<=>$b} keys %STAT){
	print STAT "$l\t$STAT{$l}\n";
}
close STAT;

if($stlfr && $debug){
	open DEBUG,"> $pfx.clean.debug",or die "Open debug file error:$!\n";
	print DEBUG "offset\tHitCode\tnum\n";
	foreach my $offset (sort {$a<=>$b} keys %{$SLOG{'hit'}}){
		foreach my $code (sort {$a<=>$b} keys %{$SLOG{'hit'}{$offset}}){
			print DEBUG "$offset\t$code\t$SLOG{'hit'}{$offset}{$code}\n";
		}
	}
	print DEBUG "\noffset\tmissCode\tnum\n";
	foreach my $offset (sort {$a<=>$b} keys %{$SLOG{'miss'}}){
		foreach my $code (sort {$a<=>$b} keys %{$SLOG{'miss'}{$offset}}){
			my $format_code = sprintf("%03d",$code);
			print DEBUG "$offset\t$format_code\t$SLOG{'miss'}{$offset}{$code}\n";
		}
	}
	close DEBUG;
}

my $end_run = time() - $start_run;
print STDERR "Running time: $end_run sec.\n";

exit;
################################################################################
### Sub functions
################################################################################
sub fqRead {
	my $present= shift;
	my $handle = shift;
	chomp($_[0] = $present);
	chomp($_[1] = <$handle>);
	chomp($_[2] = <$handle>);
	chomp($_[3] = <$handle>);
	return(@_);
}

sub ca1_cut {
  my $Sc  = shift;
  my $cut = shift;
  my $sysQ = shift;
  my $seq = shift;
  my $q = shift;
  my ($ca, $min,$oa0, $oa1, $s,$p) = (1, 0, 1, 1, 0, 0);
	my ($QB10,$QB20,$QB30,$QA10,$QA20,$QA30) = (0,0,0,0,0,0);
  my @Q;
  my @PQ;
	my $l0 = length($q);
    # cal phrd Q
  while($p<$l0){
    $_ = substr($q,$p,1);
    $_ = ord($_) - $sysQ;
    push @PQ, $_;
		# count Q10, Q20 and Q30
		if($_ >= 30){
			$QB10++;$QB20++;$QB30++
		}elsif($_>=20){
			$QB10++;$QB20++;
		}elsif($_>=10){
			$QB10++;
		}
		#
    push @Q, $P2A{$_};
    $p ++;
  }
  # calculate first seed OA
  $p = 0;
  my @seedOA = (0);
  while($p<30){
      $seedOA[0] += $Q[$p];
      $p ++;
  }
  # choose best seed
  while($p<$l0 && $seedOA[$s]<$Sc){
      $seedOA[$p-29] = $seedOA[$p-30] + $Q[$p] - $Q[$p-30];
      $s = ($seedOA[$p-29] > $seedOA[$s])?$p-29:$s;
      $p++;
  }
  # trim
  # $ca = $seedOA[$s];
  $p = $s + 30;
  $ca = $seedOA[$s];
  while($p<$l0){
    my $acc = $Q[$p];
    if($acc < $min){
        $oa1 = $ca + $min;
        $min = $acc;
    }else{
      $oa1 = $ca + $acc;
    }
		last if $oa1 < $cut;
		$ca = $oa1;
		$p++;
  }
	$p--;
  $ca = 10**$ca;
	my $PQ =sprintf("%2d",-log(1-$ca)/log(10)*10);

	my $l   = $p - $s + 1;
	$seq = substr($seq,$s,$l);
	$q   = substr($q,$s,$l);
	# count Q10, Q20 and Q30
	for(my $i=$s;$i<$p;$i++){
		if($PQ[$i] >= 30){ $QA10++;$QA20++;$QA30++
		}elsif($PQ[$i]>=20){ $QA10++;$QA20++;
		}elsif($PQ[$i]>=10){ $QA10++;}
	}
	#
  return($ca,$PQ,$s,$l,$seq,$q,$l0,$QB10,$QB20,$QB30,$QA10,$QA20,$QA30);
}

sub preCumulate {
	my $n = shift;
	my $m = shift;
	if($m==0){
		$sum_lens[$n] += $QS0[0];
		$sum_QB10[$n] += $QS0[1];
		$sum_QB20[$n] += $QS0[2];
		$sum_QB30[$n] += $QS0[3];
	}elsif($m==1){
		$sum_lens[$n] += $QS1[0];
		$sum_QB10[$n] += $QS1[1];
		$sum_QB20[$n] += $QS1[2];
		$sum_QB30[$n] += $QS1[3];
	}
}

sub cumulate {
	my $n = shift;
	my $m = shift;
	$remainQ[$n]  ++;
	$STAT{$len[$m]} ++;
	$max_bp[$n] = ($max_bp[$n] > $len[$m])?$max_bp[$n]:$len[$m];
	$min_bp[$n] = ($min_bp[$n] < $len[$m])?$min_bp[$n]:$len[$m];
	$sum_bp[$n] += $len[$m];
	$sum_s[$n]  += $start[$m];
	$sum_oa[$n] += $Aqual[$m];
	$sum_Q[$n] += $PQ[$m];
	if($m==0){
		$sum_QA10[$n] += $QS0[4];
		$sum_QA20[$n] += $QS0[5];
		$sum_QA30[$n] += $QS0[6];
	}elsif($m==1){
		$sum_QA10[$n] += $QS1[4];
		$sum_QA20[$n] += $QS1[5];
		$sum_QA30[$n] += $QS1[6];
	}
}

sub stlfr_barcode_dict{
	my $bf = shift;
	my @base = ("A","T","G","C");
	open BF, "<$bf" or die $!;
	while(<BF>){
		chomp;
		my @read = split;
		$BEAD_BARCODE{'origin'}{$read[0]} = $read[1];
		for(my $i=0;$i<10;$i++){
			foreach my $snp (@base){
				my $mutate = substr($read[0],0,$i).$snp.substr($read[0],$i+1,9-$i);
				my $revMut = reverse($mutate);
				$BEAD_BARCODE{'oneSnp'}{$mutate} = $read[1];
				$BEAD_BARCODE{'RevSnp'}{$mutate} = $read[1];
			}
		}
	}
	close BF;
}

sub stlfr_get_barcode_label{
	my $seq = shift;
	my(@bcodes,@blabels);
	my %debugs = ();
	my($try,$min,$HitScore) = (0,0,0);
	my %missScore;
	my @offsets = (0,-1,1,-2,2);
	while($try<5 && $min==0){
		my $offset = $offsets[$try];
		$HitScore = 0;
		@bcodes = (substr($seq,100+$offset,10), substr($seq,116+$offset,10), substr($seq,$pos3+$offset,10));
		for(my $i=0;$i<3;$i++){
			if(defined $BEAD_BARCODE{'origin'}{$bcodes[$i]}){
				$blabels[$i] = $BEAD_BARCODE{'origin'}{$bcodes[$i]};
				$HitScore += 3*10**(2-$i);
			}elsif(defined $BEAD_BARCODE{'oneSnp'}{$bcodes[$i]}){
				$blabels[$i] = $BEAD_BARCODE{'oneSnp'}{$bcodes[$i]};
				$HitScore += 2*10**(2-$i);
			}else{
				if(defined $BEAD_BARCODE{'RevSnp'}{$bcodes[$i]}){
					$blabels[$i] = $BEAD_BARCODE{'RevSnp'}{$bcodes[$i]};
					$HitScore += 1*10**(2-$i);
				}else{
					$blabels[$i] = 0;
				}
			}
		}
		$min = min @blabels;
		if($min == 0){
			$missScore{$offset} += $HitScore;
		}
		$try ++;
	}
	if($min>0){
		$try --;
		$SLOG{'hit'}{$offsets[$try]}{sprintf("%03d",$HitScore)} ++;
	}else{
		foreach my $offset (sort keys %missScore){
			$SLOG{'miss'}{$offset}{sprintf("%03d",$missScore{$offset})} ++;
		}
	}

	my $tag = sprintf("%04d_%04d_%04d",$blabels[0],$blabels[1],$blabels[2]);

	#Add tag into ID
	if($fqID[1] && $fqID[1] =~ /\/2( |$)/){
		$fqID[1] =~ s/\/2/\/$tag\/2/;
	}

	if($fqID[0] =~ /\/1( |$)/){
		$fqID[0] =~ s/\/1/\/$tag\/1/;
	}else{
		$fqID[0] = "$fqID[0]/$tag";
	}

	return($min);
}
